/**
 * Do NOT modify manually.
 * This code is autogenerated using /src/main/gen_p4.go using the template in perf_query_p4_template.txt.
 * Any changes you wish to make should be made to perf_query_p4_template.txt.
 */

#include <core.p4>
#include <v1model.p4>

// This program processes packets composed of an Ethernet and
// an IPv4 header, performing forwarding based on the
// destination IP address

typedef bit<48>  EthernetAddress;
typedef bit<32>  IPv4Address;

// standard Ethernet header
header Ethernet_h {
    EthernetAddress dstAddr;
    EthernetAddress srcAddr;
    bit<16>         etherType;
}

// IPv4 header without options
header Ipv4_h {
    bit<4>       version;
    bit<4>       ihl;
    bit<8>       diffserv;
    bit<16>      totalLen;
    bit<16>      identification;
    bit<3>       flags;
    bit<13>      fragOffset;
    bit<8>       ttl;
    bit<8>       protocol;
    bit<16>      hdrChecksum;
    IPv4Address  srcAddr;
    IPv4Address  dstAddr;
}

// Parser section

// List of all recognized headers
struct Headers {
    Ethernet_h ethernet;
    Ipv4_h     ip;
}

struct Metadata {
}

parser P(packet_in b,
         out Headers p,
         inout Metadata meta,
         inout standard_metadata_t standard_meta) {
    state start {
        b.extract(p.ethernet);
        transition select(p.ethernet.etherType) {
            0x0800 : parse_ipv4;
            // no default rule: all other packets rejected
        }
    }

    state parse_ipv4 {
        b.extract(p.ip);
        transition accept;
    }
}

// match-action pipeline section

control Ing(inout Headers headers,
            inout Metadata meta,
            inout standard_metadata_t standard_meta) {

    /**
     * Indicates that a packet is dropped by setting the
     * output port to the DROP_PORT
     */
    action Drop_action() {
        standard_meta.drop = 1w1;
    }

    /**
     * Set the next hop and the output port.
     * Decrements ipv4 ttl field.
     * @param ivp4_dest ipv4 address of next hop
     * @param port output port
     */
    action Set_nhop(out IPv4Address nextHop,
                    IPv4Address ipv4_dest,
                    bit<9> outPort) {
        nextHop = ipv4_dest;
        headers.ip.ttl = headers.ip.ttl-1;
        standard_meta.egress_port = outPort;
    }

    /**
     * Computes address of next Ipv4 hop and output port
     * based on the Ipv4 destination of the current packet.
     * Decrements packet Ipv4 TTL.
     * @param nextHop Ipv4 address of next hop
     */
    table ipv4_match(out IPv4Address nextHop) {
        key = { headers.ip.dstAddr : lpm; }
        actions = {
            Drop_action;
            Set_nhop(nextHop);
        }

        size = 1024;
        default_action = Drop_action;
    }

    //table check_ttl() {
    //    key = { headers.ip.ttl : exact; }
    //    actions = { Drop_action; NoAction; }
    //    const default_action = NoAction;
    //}

    /**
     * Set the destination MAC address of the packet
     * @param dmac destination MAC address.
     */
    action Set_dmac(EthernetAddress dmac) {
        headers.ethernet.dstAddr = dmac;
    }
    
    /**
     * Set the destination Ethernet address of the packet
     * based on the next hop IP address.
     * @param nextHop Ipv4 address of next hop.
     */
    table dmac(in IPv4Address nextHop) {
       key = { nextHop : exact; }
       actions = {
            Drop_action;
            Set_dmac;
       }
       size = 1024;
       default_action = Drop_action;
   }

   /**
    * Set the source MAC address.
    * @param smac: source MAC address to use
    */
    action Set_smac(EthernetAddress smac)
       { headers.ethernet.srcAddr = smac; }

      /**
       * Set the source mac address based on the output port.
       */
      table smac() {
           key = { standard_meta.egress_port : exact; }
           actions = {
                Drop_action;
                Set_smac;
          }
          size = 16;
          default_action = Drop_action;
      }

    apply {
        standard_meta.egress_port = 2;
        IPv4Address nextHop; // temporary variable

        ipv4_match.apply(nextHop); // Match result will go into nextHop

        //check_ttl.apply();

        dmac.apply(nextHop);

        smac.apply();
        standard_meta.drop = 1w0;
    }
}

control Eg(inout Headers hdrs,
           inout Metadata meta,
           inout standard_metadata_t standard_meta) {
    
    // Create a 4-way register of size 1024.
    // Each row in the hash table stores 4 keys or values.
    // The most recently accessed one is last (in the least significant bit positions).
    register<bit<64>>(32w1024) kvKeys;
    register<bit<64>>(32w1024) kvValues;
    const bit<16> defaultValue = 0;

    apply {
        // Logic to update KV store.
        bit<16> evictedKey = 0;
        bit<16> evictedValue = 0;
        // Count by source IP. Should be modified.
        bit<16> key = hdrs.ip.dstAddr[15:0];
        @atomic {
            bit<32> hsh = (bit<32>)(hdrs.ip.dstAddr[15:0]) % 1024;
            // Should this be 1024 or 1023? Max is unclear. 
            // hash(hsh, HashAlgorithm.crc32, 32w0, key, 32w1024);
            bit<64> rowKeys = 0;
            bit<64> rowValues = 0;
            bit done = 1w0;
            kvKeys.read(rowKeys, hsh);
            kvValues.read(rowValues, hsh);
            bit<16> curKey = 0;
            
            curKey = rowKeys[15:0];
            if (done == 1w0 && (curKey == key || curKey == 0)) {
                bit<16> val = defaultValue;
                if (curKey == key) {
                    val = rowValues[15:0];
                } 
                // Custom update logic goes here.
                val=val+1;

                // Shift entries left by one and move the current entry to the end of the row vector.
                
                rowKeys = rowKeys & ~64w0xffff;
                rowKeys = rowKeys + (bit<64>)key;
                
                rowValues = rowValues & ~64w0xffff;
                rowValues = rowValues + (bit<64>)val;
                kvKeys.write(hsh, rowKeys);
                kvValues.write(hsh, rowValues);
                done = 1w1;
            }
            curKey = rowKeys[31:16];
            if (done == 1w0 && (curKey == key || curKey == 0)) {
                bit<16> val = defaultValue;
                if (curKey == key) {
                    val = rowValues[31:16];
                } 
                // Custom update logic goes here.
                val=val+1;

                // Shift entries left by one and move the current entry to the end of the row vector.
                rowKeys[31:16] = rowKeys[15:0];
                rowKeys = rowKeys & ~64w0xffff;
                rowKeys = rowKeys + (bit<64>)key;
                rowValues[31:16] = rowValues[15:0];
                rowValues = rowValues & ~64w0xffff;
                rowValues = rowValues + (bit<64>)val;
                kvKeys.write(hsh, rowKeys);
                kvValues.write(hsh, rowValues);
                done = 1w1;
            }
            curKey = rowKeys[47:32];
            if (done == 1w0 && (curKey == key || curKey == 0)) {
                bit<16> val = defaultValue;
                if (curKey == key) {
                    val = rowValues[47:32];
                } 
                // Custom update logic goes here.
                val=val+1;

                // Shift entries left by one and move the current entry to the end of the row vector.
                rowKeys[47:16] = rowKeys[31:0];
                rowKeys = rowKeys & ~64w0xffff;
                rowKeys = rowKeys + (bit<64>)key;
                rowValues[47:16] = rowValues[31:0];
                rowValues = rowValues & ~64w0xffff;
                rowValues = rowValues + (bit<64>)val;
                kvKeys.write(hsh, rowKeys);
                kvValues.write(hsh, rowValues);
                done = 1w1;
            }
            curKey = rowKeys[63:48];
            if (done == 1w0 && (curKey == key || curKey == 0)) {
                bit<16> val = defaultValue;
                if (curKey == key) {
                    val = rowValues[63:48];
                } else {
                    evictedKey = curKey;
                    evictedValue = rowValues[63:48];
                }
                // Custom update logic goes here.
                val=val+1;

                // Shift entries left by one and move the current entry to the end of the row vector.
                rowKeys[63:16] = rowKeys[47:0];
                rowKeys = rowKeys & ~64w0xffff;
                rowKeys = rowKeys + (bit<64>)key;
                rowValues[63:16] = rowValues[47:0];
                rowValues = rowValues & ~64w0xffff;
                rowValues = rowValues + (bit<64>)val;
                kvKeys.write(hsh, rowKeys);
                kvValues.write(hsh, rowValues);
                done = 1w1;
            }
        } // end @atomic
    }
}

// deparser section
control DP(packet_out b, in Headers p) {
    apply {
        b.emit(p.ethernet);
        b.emit(p.ip);
    }
}

// Fillers
control Verify(in Headers hdrs, inout Metadata meta) {
    apply {}
}

control Compute(inout Headers hdr, inout Metadata meta) {
    apply {}
}

// Instantiate the top-level V1 Model package.
V1Switch(P(),
         Verify(),
         Ing(),
         Eg(),
         Compute(),
         DP()) main;
